// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// CheckHealthNoContentCode is the HTTP code returned for type CheckHealthNoContent
const CheckHealthNoContentCode int = 204

/*CheckHealthNoContent Server is up

swagger:response checkHealthNoContent
*/
type CheckHealthNoContent struct {
}

// NewCheckHealthNoContent creates CheckHealthNoContent with default headers values
func NewCheckHealthNoContent() *CheckHealthNoContent {

	return &CheckHealthNoContent{}
}

// WriteResponse to the client
func (o *CheckHealthNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

/*CheckHealthDefault Unknown Error

swagger:response checkHealthDefault
*/
type CheckHealthDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCheckHealthDefault creates CheckHealthDefault with default headers values
func NewCheckHealthDefault(code int) *CheckHealthDefault {
	if code <= 0 {
		code = 500
	}

	return &CheckHealthDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the check health default response
func (o *CheckHealthDefault) WithStatusCode(code int) *CheckHealthDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the check health default response
func (o *CheckHealthDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the check health default response
func (o *CheckHealthDefault) WithPayload(payload string) *CheckHealthDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the check health default response
func (o *CheckHealthDefault) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckHealthDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
