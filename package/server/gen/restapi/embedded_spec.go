// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Tic-Tak-Toe Server",
    "version": "0.1.0"
  },
  "paths": {
    "/games": {
      "post": {
        "description": "Start a new game",
        "operationId": "startGame",
        "responses": {
          "201": {
            "description": "Game was started successfully",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "$ref": "#/responses/unknown"
          }
        }
      }
    },
    "/games/{gameId}/moves": {
      "post": {
        "description": "Play a move",
        "operationId": "playMove",
        "parameters": [
          {
            "$ref": "#/parameters/gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "The move was played or the game has ended",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "An invalid move was played",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "$ref": "#/responses/unknown"
          }
        }
      }
    },
    "/games/{gameId}/quit": {
      "post": {
        "description": "Quit a game that is in progress",
        "operationId": "quitGame",
        "parameters": [
          {
            "$ref": "#/parameters/gameId"
          }
        ],
        "responses": {
          "200": {
            "description": "The game was stopped successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The game is already over",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "$ref": "#/responses/unknown"
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check if the server is running",
        "operationId": "checkHealth",
        "responses": {
          "204": {
            "description": "Server is up"
          },
          "default": {
            "$ref": "#/responses/unknown"
          }
        }
      }
    }
  },
  "definitions": {
    "Game": {
      "type": "object",
      "default": {
        "size": 3,
        "status": "IN_PROGRESS"
      },
      "properties": {
        "id": {
          "description": "The id used to interact with a game",
          "type": "integer",
          "format": "int64"
        },
        "moves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Move"
          }
        },
        "size": {
          "description": "The board size (n by n)",
          "type": "integer"
        },
        "status": {
          "type": "string",
          "enum": [
            "IN_PROGRESS",
            "COMPLETED"
          ]
        },
        "winner": {
          "$ref": "#/definitions/Player"
        }
      }
    },
    "Move": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "playedAt": {
          "description": "The time the move was played at",
          "type": "string",
          "format": "date-time"
        },
        "playedBy": {
          "$ref": "#/definitions/Player"
        },
        "position": {
          "description": "The index (from left to right, top to bottom) of the move on the board",
          "type": "integer"
        }
      }
    },
    "Player": {
      "type": "string",
      "enum": [
        "P1",
        "P2"
      ],
      "x-nullable": true
    }
  },
  "parameters": {
    "gameId": {
      "type": "integer",
      "format": "int64",
      "description": "The id of the game that will be effected by the operation",
      "name": "gameId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "unknown": {
      "description": "Unknown Error",
      "schema": {
        "type": "string"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Tic-Tak-Toe Server",
    "version": "0.1.0"
  },
  "paths": {
    "/games": {
      "post": {
        "description": "Start a new game",
        "operationId": "startGame",
        "responses": {
          "201": {
            "description": "Game was started successfully",
            "schema": {
              "$ref": "#/definitions/Game"
            }
          },
          "default": {
            "description": "Unknown Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/games/{gameId}/moves": {
      "post": {
        "description": "Play a move",
        "operationId": "playMove",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The id of the game that will be effected by the operation",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The move was played or the game has ended",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "An invalid move was played",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/games/{gameId}/quit": {
      "post": {
        "description": "Quit a game that is in progress",
        "operationId": "quitGame",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The id of the game that will be effected by the operation",
            "name": "gameId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The game was stopped successfully",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The game is already over",
            "schema": {
              "type": "string"
            }
          },
          "default": {
            "description": "Unknown Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Check if the server is running",
        "operationId": "checkHealth",
        "responses": {
          "204": {
            "description": "Server is up"
          },
          "default": {
            "description": "Unknown Error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Game": {
      "type": "object",
      "default": {
        "size": 3,
        "status": "IN_PROGRESS"
      },
      "properties": {
        "id": {
          "description": "The id used to interact with a game",
          "type": "integer",
          "format": "int64"
        },
        "moves": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Move"
          }
        },
        "size": {
          "description": "The board size (n by n)",
          "type": "integer"
        },
        "status": {
          "type": "string",
          "enum": [
            "IN_PROGRESS",
            "COMPLETED"
          ]
        },
        "winner": {
          "$ref": "#/definitions/Player"
        }
      }
    },
    "Move": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "playedAt": {
          "description": "The time the move was played at",
          "type": "string",
          "format": "date-time"
        },
        "playedBy": {
          "$ref": "#/definitions/Player"
        },
        "position": {
          "description": "The index (from left to right, top to bottom) of the move on the board",
          "type": "integer"
        }
      }
    },
    "Player": {
      "type": "string",
      "enum": [
        "P1",
        "P2"
      ],
      "x-nullable": true
    }
  },
  "parameters": {
    "gameId": {
      "type": "integer",
      "format": "int64",
      "description": "The id of the game that will be effected by the operation",
      "name": "gameId",
      "in": "path",
      "required": true
    }
  },
  "responses": {
    "unknown": {
      "description": "Unknown Error",
      "schema": {
        "type": "string"
      }
    }
  }
}`))
}
