// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Move move
//
// swagger:model Move
type Move struct {

	// id
	ID int64 `json:"id,omitempty"`

	// The time the move was played at
	// Format: date-time
	PlayedAt strfmt.DateTime `json:"playedAt,omitempty"`

	// player
	Player Player `json:"player,omitempty"`

	// The index (from left to right, top to bottom) of the move on the board
	Position int64 `json:"position,omitempty"`
}

// Validate validates this move
func (m *Move) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlayedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlayer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Move) validatePlayedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.PlayedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("playedAt", "body", "date-time", m.PlayedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Move) validatePlayer(formats strfmt.Registry) error {

	if swag.IsZero(m.Player) { // not required
		return nil
	}

	if err := m.Player.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("player")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Move) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Move) UnmarshalBinary(b []byte) error {
	var res Move
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
