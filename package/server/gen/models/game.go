// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Game game
//
// swagger:model Game
type Game struct {

	// The id used to interact with a game
	ID int64 `json:"id,omitempty"`

	// moves
	Moves []*Move `json:"moves"`

	// The board size (n by n)
	Size int64 `json:"size,omitempty"`

	// status
	// Enum: [IN_PROGRESS COMPLETED]
	Status string `json:"status,omitempty"`

	// winner
	Winner *Player `json:"winner,omitempty"`
}

func (m *Game) UnmarshalJSON(b []byte) error {
	type GameAlias Game
	var t GameAlias
	if err := json.Unmarshal([]byte("{\"size\":3,\"status\":\"IN_PROGRESS\"}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = Game(t)
	return nil
}

// Validate validates this game
func (m *Game) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMoves(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWinner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Game) validateMoves(formats strfmt.Registry) error {

	if swag.IsZero(m.Moves) { // not required
		return nil
	}

	for i := 0; i < len(m.Moves); i++ {
		if swag.IsZero(m.Moves[i]) { // not required
			continue
		}

		if m.Moves[i] != nil {
			if err := m.Moves[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("moves" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var gameTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gameTypeStatusPropEnum = append(gameTypeStatusPropEnum, v)
	}
}

const (

	// GameStatusINPROGRESS captures enum value "IN_PROGRESS"
	GameStatusINPROGRESS string = "IN_PROGRESS"

	// GameStatusCOMPLETED captures enum value "COMPLETED"
	GameStatusCOMPLETED string = "COMPLETED"
)

// prop value enum
func (m *Game) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gameTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Game) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Game) validateWinner(formats strfmt.Registry) error {

	if swag.IsZero(m.Winner) { // not required
		return nil
	}

	if m.Winner != nil {
		if err := m.Winner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("winner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Game) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Game) UnmarshalBinary(b []byte) error {
	var res Game
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
